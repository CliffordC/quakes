{"version":3,"sources":["logo.svg","components/MapVisual.js","components/LocationForm.js","App.js","reportWebVitals.js","index.js"],"names":["containerStyle","width","height","center","lat","parseFloat","lng","MapVisuals","data","console","log","isLoaded","useJsApiLoader","id","googleMapsApiKey","process","React","useState","setMap","onLoad","useCallback","map","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount","mapContainerStyle","zoom","element","index","position","geonames","Geonames","username","lan","encoding","place","a","result","search","q","locale","north","south","west","east","earthquakes","earthQuakeData","forEach","chunck","push","error","defaultData","LocationForm","props","location","setLocation","quakeData","setQuakeData","onSubmit","event","preventDefault","generator","then","res","value","onChange","target","type","length","MapVisual","App","className","src","logo","alt","href","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c3f89b1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\nimport { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';\nimport GoogleMapReact from 'google-map-react'\n\nconst containerStyle = {\n  width: '400px',\n  height: '400px'\n};\n\nconst MarkerStyle = {\n  color: 'white',\n  fontsize: '20px',\n  backgroundColor: 'black',\n  height: '28px',\n  width: '42px',\n  borderRadius: '5px',\n}\n\nconst center = {\n  lat: parseFloat(47.60),\n  lng: parseFloat(-122.33)\n};\n\nconst AnyReactComponent = ({ text }) => <div style={MarkerStyle}>{text}</div>;\n\n\n// TO DO: \n// - Change where MapVisuals is called. That way it is not called\n// at time to render. Put it in LocationForm and have it display the map\n// with Markers for earthquake locations.\n// \n// - Make the site pretty\n// \n// - Make sure gh-pages displays the webpage online \n// \n// \n\nconst MapVisuals = ({data}) =>{\n    console.log('In Map Visuals',data)\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: process.env.REACT_APP_API_KEY\n  })\n\n  const [map, setMap] = React.useState(null)\n  const [info,setData] = React.useState([])\n  \n\n  const onLoad = React.useCallback(function callback(map) {\n    const bounds = new window.google.maps.LatLngBounds();\n    map.fitBounds(bounds);\n    setMap(map)\n  }, [])\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null)\n  }, [])\n  return isLoaded? (\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={10}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n      >\n          {\n          data.map((element,index) => {\n            console.log('In locations',element)\n            return (\n              <Marker\n                position={{ lat: element.lat, lng: element.lng }}\n                key={index}\n              />)\n             })\n             }\n      </GoogleMap>\n  ) : <></>\n  // const defaultProps = {\n  //   zoom: 11\n  // };\n  // return (\n  //   <div style={{ height: '100vh', width: '75%' }}>\n  //     <GoogleMapReact\n  //       bootstrapURLKeys={{ key: process.env.REACT_APP_API_KEY }}\n  //       defaultCenter={center}\n  //       defaultZoom={defaultProps.zoom}\n  //     >\n        \n  //         {props.data.map( (element,index) =>(\n  //           <AnyReactComponent\n  //             lat={element.lat}\n  //             lng={element.lng}\n  //             text= \"Quake Here!\"\n  //             key={index}\n  //           />\n  //           )\n  //         )\n          \n  //       }\n        \n        \n  //     </GoogleMapReact>\n  //   </div>\n  //   )\n}\n\nexport default MapVisuals;","import React, { useState } from 'react';\nimport Geonames from 'geonames.js';\nimport MapVisuals from './MapVisual';\n\nconst geonames = Geonames({\n    username: 'cchirwa',\n    lan: 'en',\n    encoding: 'JSON'\n  });\n\nasync function generator(place) {\n    try{\n        const result = []\n        const locale = await geonames.search({q: `${place}`}) \n        //console.log(locale.geonames[0])\n\n        //lat = center of north and south so add a set degree for NandS bounds\n        //lng = east and west add a set degree for bounds \n        const lat = locale.geonames[0].lat\n        const lng = locale.geonames[0].lng\n\n        const north = parseFloat(lat + .10)\n        const south = parseFloat(lat - .10)\n        const west = parseFloat(lng - .10)\n        const east = parseFloat(lng + .10)\n\n        const earthQuakeData= await geonames.earthquakes({south,north,east,west});\n        //const countries = await geonames.countryInfo({}) //get continents\n        //const states = await geonames.children({geonameId: countries.geonames[0].geonameId}) // gets USA states at 232\n        //const regions = await geonames.children({geonameId: states.geonames[0].geonameId});\n        //const cities = await geonames.children({geonameId: regions.geonames[0].geonameId});\n        //console.log(continents);\n        //console.log(earthQuakeData.earthquakes)\n\n        const list =   earthQuakeData.earthquakes\n        list.forEach( element => {\n          const chunck = {\n            lat: element.lat,\n            lng: element.lng\n          }\n          result.push(chunck)\n        });\n        console.log('quake data: ',(result))\n        return (result);\n      }catch(err){\n        console.error(err);\n      }\n}\n\nconst defaultData = [{\n        lat: 47.60,\n        lng: -122.33}]\n\nconst LocationForm = (props) =>{\n\n    const [location,setLocation] = useState(\"\")\n    const [quakeData,setQuakeData] = useState([])\n\n    const MajorQuake = {\n      lat: 38.14,\n      lng: 73.41\n    } \n  \n\n    const addLocation = (event) => {\n        event.preventDefault()\n        generator(location).then(res => setQuakeData(res))\n        // //console.log('data length', data.length)\n        // setTimeout(()=> {\n        //   console.log('length',(data))\n        //   const list = {...data}\n        //   //if(data.length>0){\n        //     props.handleData(list)\n        //   // }else{\n        //   //   console.log('default data')\n        //   //   const defaultData = [{\n        //   //     lat: 47.60,\n        //   //     lng: -122.33}]\n        //   //   handleData(defaultData)\n        //   // } \n        //   }, 5000);\n      }\n\n    const handleLocationChange = (event) => {\n        console.log(event.target.value)\n        setLocation(event.target.value)\n    }\n    \n    return (\n        <div>\n            <form onSubmit={addLocation}>\n                <input \n                value={location} \n                onChange={handleLocationChange}/>\n                <button type=\"submit\">search</button>\n            </form> \n            <div >\n            { \n              quakeData.length>0?\n             <MapVisuals data={quakeData}/>:<MapVisuals data={defaultData} />\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default LocationForm;","import logo from './logo.svg';\nimport React, { useState } from 'react';\nimport LocationForm from './components/LocationForm'\nimport MapVisuals from './components/MapVisual';\nimport './App.css';\n\nfunction App() {\n\n  const [quakeData,setQuakeData] = useState([{}])\n\n  const handleData = (data) =>{\n    setQuakeData(data)\n    console.log('quake data in maps',quakeData)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <LocationForm />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}