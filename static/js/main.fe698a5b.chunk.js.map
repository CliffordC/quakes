{"version":3,"sources":["logo.svg","components/LocationForm.js","components/MapVisual.js","App.js","reportWebVitals.js","index.js"],"names":["geonames","Geonames","username","lan","encoding","place","a","search","q","locale","lat","lng","north","parseFloat","south","west","east","console","log","earthquakes","earthQuakeData","error","LocationForm","props","useState","location","setLocation","onSubmit","event","preventDefault","list","generator","forEach","element","push","value","onChange","target","type","containerStyle","width","height","center","MapVisuals","locations","isLoaded","useJsApiLoader","id","googleMapsApiKey","React","setMap","onLoad","useCallback","map","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount","mapContainerStyle","zoom","position","App","quakeLocations","setQuakeLocations","className","src","logo","alt","href","rel","handleLocation","data","MapVisual","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAAe,MAA0B,iC,gDCInCA,EAAWC,IAAS,CACtBC,SAAU,UACVC,IAAK,KACLC,SAAU,S,4CAGd,WAAyBC,GAAzB,6BAAAC,EAAA,+EAE6BN,EAASO,OAAO,CAACC,EAAE,GAAD,OAAKH,KAFpD,cAEcI,EAFd,OAOcC,EAAMD,EAAOT,SAAS,GAAGU,IACzBC,EAAMF,EAAOT,SAAS,GAAGW,IAEzBC,EAAQC,WAAWH,EAAM,IACzBI,EAAQD,WAAWH,EAAM,IACzBK,EAAOF,WAAWF,EAAM,IACxBK,EAAOH,WAAWF,EAAM,IAC9BM,QAAQC,IAAIJ,EAAMF,EAAMI,EAAKD,GAdrC,UAgBoCf,EAASmB,YAAY,CAACL,QAAMF,QAAMI,OAAKD,SAhB3E,eAgBcK,EAhBd,yBAuBgBA,GAvBhB,kCAyBQH,QAAQI,MAAR,MAzBR,2D,sBA6BA,IAiCeC,EAjCM,SAACC,GAAW,IAAD,EAEGC,mBAAS,IAFZ,mBAErBC,EAFqB,KAEZC,EAFY,KAqB5B,OACI,8BACI,uBAAMC,SAnBM,SAACC,GACjBA,EAAMC,iBACN,IAAMC,EAAO,I,4CACAC,CAAUN,GAClBN,YAAYa,SAAS,SAAAC,GACrBH,EAAKI,KAAKD,EAAQvB,IAAIuB,EAAQtB,QAEnCM,QAAQC,IAAIY,IAYR,UACI,uBACAK,MAAOV,EACPW,SAXiB,SAACR,GAC1BX,QAAQC,IAAIU,EAAMS,OAAOF,OACzBT,EAAYE,EAAMS,OAAOF,UAUjB,wBAAQG,KAAK,SAAb,0B,OC/DVC,EAAiB,CACrBC,MAAO,QACPC,OAAQ,SAGJC,EAAS,CACbhC,KAAM,MACNC,KAAM,QAyCOgC,EAtCI,SAAC,GAAgB,IAAfC,EAAc,EAAdA,UACjB3B,QAAQC,IAAI,iBAAiB0B,GADE,IAGzBC,EAAaC,YAAe,CAClCC,GAAI,oBACJC,iBAAkB,4CAFZH,SAHyB,EAQXI,IAAMzB,SAAS,MARJ,mBAQrB0B,GARqB,WAU3BC,EAASF,IAAMG,aAAY,SAAkBC,GACjD,IAAMC,EAAS,IAAIC,OAAOC,OAAOC,KAAKC,aACtCL,EAAIM,UAAUL,GACdJ,EAAOG,KACN,IAEGO,EAAYX,IAAMG,aAAY,SAAkBC,GACpDH,EAAO,QACN,IAEH,OAAOL,EACH,eAAC,IAAD,CACEgB,kBAAmBtB,EACnBG,OAAQA,EACRoB,KAAM,GACNX,OAAQA,EACRS,UAAWA,EALb,UAQM,cAAC,IAAD,CACAG,SAAU,CAAErD,KAAM,OAAQC,IAAK,WAGnC,gCAEF,8B,MCZSqD,MA9Bf,WAAgB,IAAD,EAE8BxC,mBAAS,IAFvC,mBAENyC,EAFM,KAESC,EAFT,KAQb,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLlC,OAAO,SACPmC,IAAI,sBAJN,yBAQA,cAAC,EAAD,CAAcC,eAnBS,SAACC,GAC5BR,EAAkBQ,MAmBd,cAACC,EAAD,CAAY/B,UAAWqB,UClBhBW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fe698a5b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\nimport Geonames from 'geonames.js';\n\n\nconst geonames = Geonames({\n    username: 'cchirwa',\n    lan: 'en',\n    encoding: 'JSON'\n  });\n\nasync function generator(place) {\n    try{\n        const locale = await geonames.search({q: `${place}`}) \n        //console.log(locale.geonames[0])\n\n        //lat = center of north and south so add a set degree for NandS bounds\n        //lng = east and west add a set degree for bounds \n        const lat = locale.geonames[0].lat\n        const lng = locale.geonames[0].lng\n\n        const north = parseFloat(lat + .10)\n        const south = parseFloat(lat - .10)\n        const west = parseFloat(lng - .10)\n        const east = parseFloat(lng + .10)\n        console.log(south,north,east,west)\n\n        const earthQuakeData= await geonames.earthquakes({south,north,east,west});\n        //const countries = await geonames.countryInfo({}) //get continents\n        //const states = await geonames.children({geonameId: countries.geonames[0].geonameId}) // gets USA states at 232\n        //const regions = await geonames.children({geonameId: states.geonames[0].geonameId});\n        //const cities = await geonames.children({geonameId: regions.geonames[0].geonameId});\n        //console.log(continents);\n        \n        return (earthQuakeData);\n      }catch(err){\n        console.error(err);\n      }\n}\n\nconst LocationForm = (props) => {\n\n    const [location,setLocation] = useState(\"\")\n\n    const addLocation = (event) => {\n        event.preventDefault()\n        const list = []\n        const data = generator(location)\n        data.earthquakes.forEach( element => {\n             list.push(element.lat,element.lng)    \n        })\n        console.log(list)\n        //props.handleLocation(data)\n      }\n\n    const handleLocationChange = (event) => {\n        console.log(event.target.value)\n        setLocation(event.target.value)\n    }\n    \n\n    return (\n        <div>\n            <form onSubmit={addLocation}>\n                <input \n                value={location} \n                onChange={handleLocationChange}/>\n                <button type=\"submit\">search</button>\n            </form>   \n        </div>\n    )\n}\n\nexport default LocationForm;","import React from 'react';\nimport { GoogleMap, useJsApiLoader, Marker} from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '400px',\n  height: '400px'\n};\n\nconst center = {\n  lat: -3.745,\n  lng: -38.523\n};\n\nconst MapVisuals = ({locations}) =>{\n    console.log('IN Map Visuals',locations)\n    //const list = [...locations]\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyBE5Q8H8CJ3r_qq6mJy3XKiSPXYbtDOzcw\"\n  })\n\n  const [map, setMap] = React.useState(null)\n\n  const onLoad = React.useCallback(function callback(map) {\n    const bounds = new window.google.maps.LatLngBounds();\n    map.fitBounds(bounds);\n    setMap(map)\n  }, [])\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null)\n  }, [])\n\n  return isLoaded ? (\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={10}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n      >\n        { /* Child components, such as markers, info windows, etc. */ \n            <Marker\n            position={{ lat: -34.397, lng: 150.644 }}\n          />\n        }\n        <></>\n      </GoogleMap>\n  ) : <></>\n}\n\nexport default MapVisuals;","import logo from './logo.svg';\nimport React,{ useState }from 'react';\nimport LocationForm from './components/LocationForm'\nimport MapVisuals from './components/MapVisual';\nimport './App.css';\n\nfunction App() {\n\n  const [quakeLocations,setQuakeLocations] = useState([])\n\n  const handleLocationChange = (data) => {\n    setQuakeLocations(data)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <LocationForm handleLocation={handleLocationChange}/>\n        <MapVisuals locations={quakeLocations}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}