{"version":3,"sources":["logo.svg","components/MapVisual.js","components/LocationForm.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["containerStyle","width","height","center","lat","parseFloat","lng","MapVisuals","data","isLoaded","useJsApiLoader","id","googleMapsApiKey","process","React","useState","setMap","onLoad","useCallback","map","bounds","window","google","maps","LatLngBounds","console","log","fitBounds","onUnmount","mapContainerStyle","zoom","element","index","position","geonames","Geonames","username","lan","encoding","pageStyles","basic","place","a","result","search","q","locale","north","south","west","east","earthquakes","earthQuakeData","forEach","earthquakeData","push","error","MajorQuake","LocationForm","props","location","setLocation","quakeData","setQuakeData","onSubmit","event","preventDefault","generator","then","res","style","value","onChange","target","type","length","MapVisual","Footer","color","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fba4f0c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '100%',\n  height: '650px'\n};\n\nconst center = {\n  lat: parseFloat(47.60),\n  lng: parseFloat(-122.33)\n};\n\n// TO DO: \n// - Change where MapVisuals is called. That way it is not called\n// at time to render. Put it in LocationForm and have it display the map\n// with Markers for earthquake locations.\n// \n// - Make the site pretty\n// \n// - Make sure gh-pages displays the webpage online \n\n//Google map code gotten from @react-google-maps/api \nconst MapVisuals = ({data}) =>{\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: process.env.REACT_APP_API_KEY\n  })\n\n  const [map, setMap] = React.useState(null)\n  const [info,setData] = React.useState([])\n  \n\n  const onLoad = React.useCallback(function callback(map) {\n    const bounds = new window.google.maps.LatLngBounds();\n    console.log(bounds)\n    map.fitBounds(bounds);\n    setMap(map)\n  }, [])\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null)\n  }, [])\n  return isLoaded? (\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={5}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n      >\n          {\n          data.map((element,index) => {\n            console.log('In locations',element)\n            return (\n              <Marker\n                position={{ lat: element.lat, lng: element.lng }}\n                key={index}\n              />)\n             })\n             }\n      </GoogleMap>\n  ) : <></>\n}\n\nexport default MapVisuals;","import React, { useState } from 'react';\nimport Geonames from 'geonames.js';\nimport MapVisuals from './MapVisual';\n\n//Credentials for accessing geonames api\nconst geonames = Geonames({\n    username: 'cchirwa',\n    lan: 'en',\n    encoding: 'JSON'\n  });\n\nconst pageStyles = {\n  basic : {\n    height: '50px',\n\n  }\n}\n\nasync function generator(place) {\n  try{\n    const result = []\n    const locale = await geonames.search({q: `${place}`}) \n    //console.log(locale.geonames[0])\n\n    //lat = center of north and south so add a set degree for NandS bounds\n    //lng = east and west add a set degree for bounds \n    const lat = locale.geonames[0].lat\n    const lng = locale.geonames[0].lng\n\n    //The bounding box set offset from locale by ~28 lat miles & 22 lng miles\n    const north = parseFloat(lat + .40)\n    const south = parseFloat(lat - .40)\n    const west = parseFloat(lng - .40)\n    const east = parseFloat(lng + .40)\n\n    const earthQuakeData= await geonames.earthquakes({south,north,east,west});\n\n    const list =   earthQuakeData.earthquakes\n    list.forEach( element => {\n      const earthquakeData = {\n        lat: element.lat,\n        lng: element.lng\n      }\n      result.push(earthquakeData)\n    });\n\n    return (result);\n\n    } catch(err) {\n      //in case of miss spelling errors\n      console.error(err);\n      return (MajorQuake)\n    }\n}\n\n\nconst MajorQuake = [{\n  lat: -38.24,\n  lng: -73.05\n}]   \n\nconst LocationForm = (props) =>{\n\n    const [location,setLocation] = useState(\"\")\n    const [quakeData,setQuakeData] = useState([])\n\n    const addLocation = (event) => {\n        event.preventDefault()\n        generator(location).then(res => setQuakeData(res))\n      }\n\n    const handleLocationChange = (event) => {\n        console.log(event.target.value)\n        setLocation(event.target.value)\n    }\n    \n    return (\n        <div>\n            <form onSubmit={addLocation}>\n                <input \n                style={pageStyles.basic}\n                value={location} \n                onChange={handleLocationChange}/>\n                <button type=\"submit\">search</button>\n            </form> \n            <div >\n            { \n              quakeData.length>0?\n             <MapVisuals data={quakeData}/>:<MapVisuals data={MajorQuake} />\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default LocationForm;","import React from 'react';\n\n\nconst Footer = () => {\n\n    return (\n        <div>\n            <p style={{color:'white'}}>\n                Welcome!<br/>This site helps you visualize earthquake\n            data gathered from the geonames API. It then plots those points on \n            google maps. <br/>Just input a name of a location/city and markers \n            will appear on the map if any earthquakes have occured in that in the past.\n            <br/>Mind your spelling.\n            </p>\n        </div>    \n    )\n}\n\nexport default Footer;","import logo from './logo.svg';\nimport React, { useState } from 'react';\nimport LocationForm from './components/LocationForm'\nimport MapVisuals from './components/MapVisual';\nimport Footer from './components/Footer';\nimport './App.css';\n\nfunction App() {\n\n  const [quakeData,setQuakeData] = useState([{}])\n\n  const handleData = (data) =>{\n    setQuakeData(data)\n    console.log('quake data in maps',quakeData)\n  }\n\n  return (\n    <div className=\"App\">\n        <div className=\"MainContent\">\n          <LocationForm />\n          <Footer />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}